@use "map";
@use "sizes";

@function _getTypeScalePixelSize($level: 0) {
  @return math.pow($typeScale-factor, $level) * $typeScale-base;
}

@function typescale($level) {
  // Difference in size from one level to the next
  $typescale-factor: ratio(4);
  // The size of a <p> tag in the type scale
  $typescale-base: 1rem;
  // Levels in the type scale, from smallest to largest
  $typescale-levels: "xxsmall", "xsmall", "small", "p", "subtitle", "h3", "h2",
    "h1", "large", "xlarge", "xxlarge";
  // Eventually houses typescale values
  $typescale: ();

  @for $i from 1 to length($typescale-levels) + 1 {
    $typescale-name: list.nth($typescale-levels, $i);
    $typescale-p-index: list.index($typescale-levels, "p");
    $typeScale-index-relativeToP: ($i - $typescale-p-index);
    $typeScale-pixelSize: getTypeScalePixelSize($typeScale-index-relativeToP);

    $typescale: map.merge(
      $typescale,
      (
        $typescale-name: $typescale-pixelSize,
      )
    );
  }

  @return map.checkAndGet($typescale, #{$level});
}
